import streamlit as st
import pandas as pd
import cv2
from PIL import Image
import numpy as np
import base64
import os
import shutil
import json
import cv2
import numpy as np
from structures import TrainPath, Camera
import time
from db import clear_events_table, get_data_query_result


CONFIG_CAMERA_POLYGONS_PATH = r".\configs\camera_polygons_config"
CAMERA_NAMES_CONFIG = r".\configs\camera_source_config.json"

CAMERA_LIST = []


def config_system():
    """
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ
    """

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
    with open(CAMERA_NAMES_CONFIG, "r", encoding="utf-8") as file:
        camera_names_data: dict = json.load(file)

        for camera_name, camera_info in camera_names_data.items():
            camera_source_path = camera_info["source"]
            camera_polygons_path = os.path.join(
                CONFIG_CAMERA_POLYGONS_PATH, camera_info["polygons_file_name"])

            cur_camera = Camera(camera_source_path, camera_name)

            with open(camera_polygons_path, "r", encoding="utf-8") as polygon_file:
                polygons_coord = json.load(polygon_file)

                cur_camera.insert_train_pathes(polygons_coord)

            CAMERA_LIST.append(cur_camera)


def system_start_with_data_editor(stframe, title, data_cont, info):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–∞–º
    for camera in CAMERA_LIST:
        camera._connect_to_cam()

    stop_button = st.button("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", key="stop_button")
    count = 0
    while not stop_button:
        imgs = []
        all_detected_objects = {
            "ID": [],
            "Class Name": [],
            "Path Name": [],
            "Start Time": [],
            "Image": []
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ –Ω–∏—Ö –æ–±—ä–µ–∫—Ç—ã
        for camera in CAMERA_LIST:
            obj_list = camera.detect_objects()
            sorted_path_list = camera.sort_detected_obj_to_pathes(obj_list)

            for path_name, detected_objects in sorted_path_list.items():
                for detected_obj in detected_objects:
                    all_detected_objects["ID"].append(detected_obj.obj_id)
                    all_detected_objects["Class Name"].append(detected_obj.cls_name)
                    all_detected_objects["Path Name"].append(path_name)
                    all_detected_objects["Start Time"].append(detected_obj.start_time)
                    all_detected_objects["Image"].append(camera.cur_annotated_frame)
                train_path = camera.train_pathes[path_name]
                train_path.check_detected_obj(sorted_path_list[path_name])
            imgs.append(camera.cur_annotated_frame)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ CUDA 
        resized_imgs = [cv2.resize(img, (600, 600)) for img in imgs]
        final_img = np.hstack(resized_imgs)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        final_img = cv2.cvtColor(final_img, cv2.COLOR_BGR2RGB)
        stframe.image(final_img, use_column_width=False)



        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ 
        count += 1
        if count == 20:
            title.subheader("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            data_cont = display_data_editor(all_detected_objects, data_cont)
            count = 0

        info.subheader("–î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É - '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫–∞–º–µ—Ä'")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if stop_button:
            stop_button = st.button("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", key=f"stop_button_update_{time.time()}")

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ DataFrame
def convert_image_to_base64(img):
    if isinstance(img, np.ndarray):
        _, buffer = cv2.imencode('.png', img)
        img_base64 = base64.b64encode(buffer).decode('utf-8')
        return f"data:image/png;base64,{img_base64}"
    return None

def display_data_editor(data_dict, data_cont):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ st.data_editor.
    :param data_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :param data_cont: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ DataFrame
    if 'Image' in data_dict:
        images = data_dict.pop('Image')
        data_dict['Image'] = [convert_image_to_base64(img) for img in images]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df = pd.DataFrame(data_dict)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä DataFrame –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    if len(df) > 50:
        df = df.tail(50)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.data_editor –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data_cont.data_editor(df, column_config={
        'ID': st.column_config.NumberColumn("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"),
        'Class Name': st.column_config.TextColumn("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"),
        'Path Name': st.column_config.TextColumn("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç–∏"),
        'Start Time': st.column_config.DatetimeColumn("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"),
        'Image': st.column_config.ImageColumn("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    })
    return data_cont

def upload_video():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞, –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ uploaded_video –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ", type=["mp4", "avi", "mov"])
    if uploaded_file is not None:
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É uploaded_video, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists("uploaded_video"):
            shutil.rmtree("uploaded_video")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploaded_video
        os.makedirs("uploaded_video")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É uploaded_video
        video_path = os.path.join("uploaded_video", uploaded_file.name)
        with open(video_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        st.success(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        return video_path

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤ –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_count_char(data : pd.DataFrame) -> None:
    data_dict = {
    "–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã" : [],
    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏" : [],
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤" : []
    }

    for item in data.iterrows():
        data_dict["–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã"].append(item[1][0])
        data_dict["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏"].append(item[1][1])
        data_dict["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤"].append(item[1][2])

    return data_dict


def get_count_char2(data : pd.DataFrame) -> None:
    data_dict = {
    "–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã" : [],
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤" : []
    }

    for item in data.iterrows():
        data_dict["–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã"].append(item[1][0])
        data_dict["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤"].append(item[1][1])

    return data_dict

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ streamlit —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–ú–°-205",
    page_icon="üöÇ",
    layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': "# This is a header. This is an *extremely* cool app!"
    }
)

st.header('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É—Ç–µ–≤–∞—è –º–∞—à–∏–Ω–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—èüöâ', divider="rainbow")
st.subheader("*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é*üëá")
select_action = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é",("-- –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é --","–í–∏–¥–µ–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –∫–∞–º–µ—Ä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫–∞–º–µ—Ä"), label_visibility="hidden", index=0)
if select_action =="–í–∏–¥–µ–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –∫–∞–º–µ—Ä":
    start_button = st.button("–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã", icon="üöÄ")
    if start_button:
        st.subheader("***–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:***")
        clear_events_table()
        stframe = st.empty()
        title = st.empty()
        data_cont = st.empty()
        info = st.empty()
        config_system()
        system_start_with_data_editor(stframe, title, data_cont, info)

if select_action == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫–∞–º–µ—Ä":
    st.subheader("***–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–∞ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤:***")
    chart1 = st.empty()
    chart2 = st.empty()
    
    res1 = get_data_query_result("""SELECT camera_name, track_name, COUNT(*) AS track_count FROM events GROUP BY camera_name, track_name ORDER BY track_count DESC;""")
    df1 = pd.DataFrame(get_count_char(res1))
    chart1.bar_chart(data=df1, x="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤", color="–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã")

    res2 = get_data_query_result("""SELECT 
    camera_name,
    COUNT(DISTINCT object_name) AS track_count
    FROM 
    events
    GROUP BY 
    camera_name
    ORDER BY 
    camera_name;""")
    df2 = pd.DataFrame(get_count_char2(res2))
    chart2.bar_chart(data=df2, x="–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–≤", color="–ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã")
    
